name: 'Terraform - AKS Plan'

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - "aks/**"
  pull_request:
    branches:
    - main
    paths:
    - "aks/**"

#Updated yaml file path

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_SECRET : ${{ secrets.ARM_CLIENT_SECRET}}
  AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
  TF_DIR: "aks/**"

#Special permissions required for OIDC authentication
permissions:
  contents: read
  pull-requests: write

jobs:

  docs:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v3
     
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    #To build authorizer for Resource Manager API: Configure AzureCli Authorizer
    - name: Az CLI login
      uses: azure/login@v1
      with:
         azcliversion: 2.30.0
         creds: ${{ env.AZURE_CREDENTIALS }}
      

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{env.TF_DIR}}


    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform validate
      run: terraform validate -no-color
      working-directory: ${{env.TF_DIR}}
 
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -no-color tf.plan 2>&1 > /tmmp/plan.txt
      working-directory: ${{env.TF_DIR}}      

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
   # - name: Terraform Apply
    #  if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
     # run: terraform apply -auto-approve -input=false
